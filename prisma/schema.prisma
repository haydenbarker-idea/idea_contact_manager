// Contact Exchange Database Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Contact Status Pipeline
enum ContactStatus {
  NEW           // Just submitted their info
  CONTACTED     // We've reached out
  RESPONDED     // They replied
  MEETING_SET   // Meeting scheduled
  CLIENT        // Converted to client
  COLD          // No response/not interested
}

// Communication Channel
enum CommunicationType {
  SMS
  EMAIL
  LINKEDIN
  PHONE
  IN_PERSON
}

// User - Each person who wants their own contact exchange page
model User {
  id          String    @id @default(cuid())
  
  // Basic Info (from their initial contact submission)
  name        String
  email       String    @unique
  phone       String?
  linkedin    String?
  company     String?
  title       String?
  
  // Profile customization
  bio         String?
  photoUrl    String?   // Their headshot
  slug        String    @unique  // URL slug: /u/john-smith
  
  // Authentication
  password    String    // Hashed password
  
  // Configuration
  active      Boolean   @default(true)
  
  // Tracking
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  contacts    Contact[] // Contacts they've collected
  
  @@index([email])
  @@index([slug])
  @@map("users")
}

model Contact {
  id          String             @id @default(cuid())
  
  // Owner of this contact (the user who collected it)
  userId      String?            // Nullable for backwards compatibility (Hayden's contacts)
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  email       String
  phone       String?
  linkedin    String?
  company     String?
  title       String?
  notes       String?             // General notes about the contact
  status      ContactStatus      @default(NEW)
  priority    Int                @default(0) // 0 = normal, 1 = important, 2 = urgent
  
  // Photo and context
  photoUrl    String?            // URL to their selfie
  conference  String?            // Conference where we met
  
  // Tracking
  submittedAt DateTime           @default(now())
  lastContact DateTime?          // Last time we reached out
  updatedAt   DateTime           @updatedAt
  
  // Relations
  communications Communication[]

  @@index([userId])
  @@index([submittedAt])
  @@index([email])
  @@index([status])
  @@index([priority])
  @@map("contacts")
}

// Communication Log - track all interactions
model Communication {
  id          String            @id @default(cuid())
  contactId   String
  contact     Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  type        CommunicationType
  direction   String            // "OUTBOUND" or "INBOUND"
  subject     String?           // For emails
  message     String            // The actual message content
  
  // Delivery tracking
  status      String            @default("SENT") // SENT, DELIVERED, FAILED, READ
  sentAt      DateTime          @default(now())
  deliveredAt DateTime?
  
  // Metadata
  metadata    Json?             // Store provider-specific data (Twilio SID, Resend ID, etc.)

  @@index([contactId])
  @@index([sentAt])
  @@map("communications")
}

